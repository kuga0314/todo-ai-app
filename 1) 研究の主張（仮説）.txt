1) 研究の主張（仮説）
あなたのアルゴリズム（後方計画＋比例バッファ＋危険度スコア＋積み上げ配置）が、従来法より…

H1：着手の遅延を減らす（“間に合う最新開始時刻”より前に始められる割合↑）

H2：締切遵守率を高める（締切超過率↓、超過時間の中央値↓）

H3：通知の過密を減らす（同時刻に集中する通知の偏り↓）

H4：大規模タスクの後回しを防ぐ（規模大の遅延率↓）

2) 比較対象（ベースライン）
“機能追加”はしないで、通知ロジックだけ差し替える形で比較：

Baseline-A：固定リマインド（締切のX時間前に1回）

**Baseline-B：締切昇順（EDF）**で推奨開始＝max(now, D – E)、バッファなし

Proposed：あなたの方式（T_req = E×(1+B), L = D – T_req, 危険度ソート→積み上げ配置）

※ 既存コードなら、フラグ（algoVariant: "baselineA" | "baselineB" | "proposed"）だけ切り替えればOK。UI変更は不要。

3) 評価指標（ログから算出）
各タスクについて、

E 見積分, B バッファ率, T_req = E(1+B), D 締切

L = D – T_req（“間に合う最新開始”）, S 推奨開始（アルゴが出す値）

A 実際の開始（※後述の検出方法）, C 完了時刻

指標：

Start Slack：Slack_start = D – A – E（>0 なら見積どおり間に合う余裕で開始）

Latest-Start 準拠率：P(A ≤ L)

締切超過率：P(C > D) と 超過時間 C – D

通知過密度：単位時間あたり通知数の分散/平均（Fano係数）や時間帯ごとの最大同時通知数

規模別の公平性：規模（scaleやestimatedMinutes）で層別した P(A ≤ L) と超過率

4) 実験デザイン（機能を増やさずにやる）
被験者：自分＋数名でも可（n=8–20が理想）。難しければ自己ログ長期でもOK。

期間：各条件1〜2週間の AB/BA クロス（交差）で順序効果を緩和。

タスク：実務＆学習タスクをそのまま利用。

統制：平日/休日、タスク種類、規模・優先度を共変量で保持。

5) 開始時刻Aの“検出”を最小実装で
機能追加は避けつつ、計測だけ入れる：

A は「最初の通知から30分以内のいずれか（チェック/編集/コメント等）の最初のイベント時刻」を近似。

例：todos/{id} の completed 変更、updatedAt 変化、または“開始”ボタンがあればそれ（無ければ近似でOK）。

各イベントで metrics コレクションに1行：{uid, taskId, algoVariant, event:"notify|start|complete", ts, E,B,D,S,L}
→ UIは変えず、サーバ側（Functions）で書き込みフックするのが一番低侵襲。

6) 解析のしかた（軽量統計で十分）
主要指標（P(A ≤ L), 超過率, Start Slack 中央値, Fano係数）を ペア比較

正規性を仮定しない → Wilcoxonの符号付順位検定（被験者内）

効果量は Cliff’s delta か r を併記

図

Start Slack の箱ひげ/バイオリン

超過率の棒グラフ（95%CIはブートストラップ）

通知タイムラインのヒートマップ（過密の見える化）

規模別（小/中/大）に層別

7) 期待される結果の読み解き（論文の“有用性”章の骨子）
実効性：P(A ≤ L) の有意上昇、Start Slack↑ → “先延ばし抑制”の証拠

信頼性：超過率↓・超過時間↓ → “締切遵守の改善”

使いやすさの副次効果：通知過密の低減（Fano↓）→ “注意分散が起きにくい”

規模タスクの救済：大規模タスク層での改善幅が大きい → “後回し防止”の根拠

アブレーション：

B=0（バッファ無効）にすると成績が悪化 → バッファ管理の寄与

EDF（締切だけ）に戻すと過密↑ → 積み上げ配置の寄与

8) 限界と妥当性の脅威（必ず書く）
見積 E の誤差（過小見積り）

“開始”検出の近似（イベント代理）

被験者/期間の少なさ

行動変容（研究参加による Hawthorne 効果）

9) 論文の構成ひな型
背景と課題（固定通知の限界／大規模タスクの後回し）

提案法（数式：T_req, L, スコアと積み上げ）

実験計画（被験者・期間・ベースライン・指標・収集方法）

結果（統計・図表）

議論（どの要素が効いたか／アブレーション）

限界と今後（個人差学習やモバイル最適化は将来課題）

結論（有用性の総括）

必要なら、**ログ設計の最小サンプル（Functions 3〜4行の追記）**や、**結果図のテンプレ（Jupyter/Colab用）**もすぐ出します。
この方針でいけば、“新機能の水増し”なしで、有用性をデータでしっかり示せます。